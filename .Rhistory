validate_email("aureollerocher@shwarihealth.org")
validate_email("aureollerocher@yahoo.fr")
validate_email("aureollerocher@georgetown.edu")
validate_email <- function(email) {
# Check if email is empty
if (email == "") {
return(list(valid = FALSE, message = "Please provide your email address."))
}
# Common email validation regex pattern
pattern <- "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"
# Check if the email matches the pattern
valid <- grepl(pattern, email)
if(!valid) {
return(list(valid = FALSE, message = "Please enter a valid email address."))
}
# Extract domain and TLD
domain <- tolower(sub(".*@", "", email))
tld <- sub(".*\\.", "", domain)
# Check for common domain typos
common_typo_corrections <- list(
"gmial.com" = "gmail.com",
"gmil.com" = "gmail.com",
"gmal.com" = "gmail.com",
"yaho.com" = "yahoo.com",
"ymail.com" = "yahoo.com",
"hotmial.com" = "hotmail.com",
"hotmal.com" = "hotmail.com",
"outlok.com" = "outlook.com"
)
# Check if the complete domain is in our typo list
if(domain %in% names(common_typo_corrections)) {
suggested <- common_typo_corrections[[domain]]
return(list(valid = FALSE,
message = paste0("Did you mean ", suggested, "?")))
}
# Check for multiple @ symbols
if(length(gregexpr("@", email)[[1]]) > 1) {
return(list(valid = FALSE, message = "Email cannot contain multiple @ symbols."))
}
# List of common TLDs
common_tlds <- c("com", "org", "net", "edu", "gov", "mil", "co.uk", "ca", "de", "fr", "au", "jp", "io")
# List of accepted organization domains (including your custom domain)
accepted_org_domains <- c("shwarihealth.org")
# If the domain is in our accepted list, it's valid regardless of other checks
if(domain %in% accepted_org_domains) {
return(list(valid = TRUE, message = "Valid email"))
}
# Check if TLD might be a typo of a common TLD
if(!(tld %in% common_tlds) && nchar(tld) <= 2) {
return(list(valid = FALSE, message = paste0("Domain extension .", tld, " appears unusual. Did you mean .com?")))
}
# Additional validation for TLD length
if(nchar(tld) < 2 || nchar(tld) > 6) {
return(list(valid = FALSE, message = "Domain extension appears invalid."))
}
return(list(valid = TRUE, message = "Valid email"))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
password
?passwordInput
runApp()
library(shiny)
library(bslib)
library(DT)
library(sodium)  # For password hashing
install.packages("sodium")
library(shiny)
library(bslib)
library(DT)
library(sodium)  # For password hashing
# In a real app, this would be stored in a database
# This is for demonstration purposes only
users_db <- reactiveVal(data.frame(
username = c("admin", "user1"),
password_hash = sapply(c("adminpass", "userpass"), password_store),
role = c("admin", "user"),
email = c("admin@example.com", "user1@example.com"),
created_at = rep(Sys.time(), 2),
stringsAsFactors = FALSE
))
ui <- page_fluid(
tags$head(
tags$style(HTML("
.nav-tabs .nav-link.active {
font-weight: bold;
}
#login_page {
height: 100vh;
width: 100vw;
position: fixed;
top: 0;
left: 0;
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
z-index: 1000;
}
.hide-login {
display: none;
}
"))
),
# Login Page
div(id = "login_page",
div(
class = "container d-flex align-items-center justify-content-center",
style = "height: 100%;",
navset_card_tab(
height = "auto",
width = "400px",
class = "shadow-lg",
# Login Tab
nav_panel(
title = "Login",
div(
class = "p-4",
div(class = "text-center mb-4",
tags$img(src = "https://cdn-icons-png.flaticon.com/512/2098/2098402.png",
height = "50px", class = "mb-2"),
h3("Support Ticket System", class = "fw-bold text-primary")
),
div(class = "mb-3",
tags$label("Username", class = "form-label fw-semibold"),
textInput("username", NULL, placeholder = "Enter your username", width = "100%")
),
div(class = "mb-3",
tags$label("Password", class = "form-label fw-semibold"),
passwordInput("password", NULL, placeholder = "Enter your password", width = "100%")
),
div(class = "d-flex justify-content-between align-items-center mb-4",
checkboxInput("remember", "Remember me", width = NULL),
tags$a(href = "#", "Forgot password?", class = "text-primary text-decoration-none")
),
div(
actionButton("login_btn", "Sign In",
class = "btn-primary w-100 py-2",
style = "border-radius: 6px; font-weight: 600;")
),
div(id = "login_error", class = "mt-3 text-danger text-center", style = "display: none;",
"Invalid username or password")
)
),
# Register Tab
nav_panel(
title = "Create Account",
div(
class = "p-4",
div(class = "text-center mb-4",
tags$img(src = "https://cdn-icons-png.flaticon.com/512/2098/2098402.png",
height = "50px", class = "mb-2"),
h3("Create New Account", class = "fw-bold text-primary")
),
div(class = "mb-3",
tags$label("Username", class = "form-label fw-semibold"),
textInput("new_username", NULL, placeholder = "Choose a username", width = "100%")
),
div(class = "mb-3",
tags$label("Email", class = "form-label fw-semibold"),
textInput("new_email", NULL, placeholder = "Enter your email", width = "100%")
),
div(class = "mb-3",
tags$label("Password", class = "form-label fw-semibold"),
passwordInput("new_password", NULL, placeholder = "Create a password", width = "100%")
),
div(class = "mb-3",
tags$label("Confirm Password", class = "form-label fw-semibold"),
passwordInput("confirm_password", NULL, placeholder = "Confirm your password", width = "100%")
),
div(
actionButton("register_btn", "Create Account",
class = "btn-success w-100 py-2",
style = "border-radius: 6px; font-weight: 600;")
),
div(id = "register_error", class = "mt-3 text-danger text-center", style = "display: none;",
"Error message will appear here"),
div(id = "register_success", class = "mt-3 text-success text-center", style = "display: none;",
"Account created successfully! You can now log in.")
)
)
)
)
),
# Main App Content (visible after login)
uiOutput("main_content")
)
runApp()
users <- data.frame(
username = c("user", "admin"),
password = c("user1", "admin1"),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
stringsAsFactors = FALSE
)
users <- data.frame(
username = c("user", "admin"),
password = c("user1", "admin1"),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
valid_till = c("2025-10-21","2025-10-31"),
stringsAsFactors = FALSE
)
which(users$username == "user" & users$password == "user1")
length(which(users$username == "user" & users$password == "user1"))
runApp()
runApp()
runApp()
pacman::p_load(
shiny,
shinyjs,
htmltools,
shinyalert,
lubridate,
DT,
googlesheets4,
mailR,
bslib,
dplyr,
waiter,
lubridate,
sodium,
shinycustomloader
)
?sodium::hash()
pw <- "I like cookies"
hash <- password_store(pw)
hash
stopifnot(password_verify(hash, pw))
users <- data.frame(
username = c("user", "admin"),
password = sapply(c("user1", "admin1"),password_store),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
valid_till = c("2025-10-21","2025-10-31"),
stringsAsFactors = FALSE
)
users
stopifnot
if(stopifnot(password_verify(hash, password))){TRUE}
if(stopifnot(password_verify(hash, password))){FALSE}
if(stopifnot(password_verify(hash, password))){}
if(stopifnot(password_verify(hash, pw))){}
if(stopifnot(password_verify(hash, pw))){TRUE}
hash
password_verify(hash, pw)
password_verify(users$password)
password_verify(users$password,password = users$password)
users$password[1]
password_verify(users$password[1],password = "user1")
runApp()
users <- data.frame(
username = c("user", "admin"),
password = sapply(c("user1", "admin1"),password_store),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
valid_till = c("2025-10-21","2025-10-31"),
stringsAsFactors = FALSE
)
ymd(c("2025-10-21","2025-10-31"))
users <- data.frame(
username = c("user", "admin"),
password = sapply(c("user1", "admin1"),password_store),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
valid_till = ymd(c("2025-10-21","2025-10-31")),
stringsAsFactors = FALSE
)
runApp()
runApp()
runApp()
users <- data.frame(
username = c("user", "admin"),
password = sapply(c("user1", "admin1"),password_store),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
valid_till = ymd(c("2025-10-21","2025-10-31")),
stringsAsFactors = FALSE
)
which(users$username == "user" & users$password == "user1")
users <- data.frame(
username = c("user", "admin"),
password = sapply(c("user1", "admin1"),password_store),
role = c("user", "admin"),
email = c("aureolngako@gmail.com","nna217@shwarihealth.org"),
valid_till = ymd(c("2025-10-21","2025-10-31")),
stringsAsFactors = FALSE
)
runApp()
runApp()
runApp()
library(shiny)
library(bslib)
library(shinyjs)
library(sodium)
ui <- fluidPage(
useShinyjs(),
# Custom CSS for styling
tags$head(
tags$style(HTML("
.auth-card {
max-width: 450px;
margin: 50px auto;
border-radius: 12px;
box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}
.card-title {
font-weight: 600;
color: #2c3e50;
}
.auth-input {
border-radius: 6px;
}
.auth-btn {
border-radius: 6px;
font-weight: 600;
}
"))
),
# Login and Registration Container
div(id = "login_page",
style = "height: 100vh; width: 100vw; position: fixed; top: 0; left: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); z-index: 1000;",
div(class = "container d-flex align-items-center justify-content-center",
style = "height: 100%;",
card(
class = "auth-card",
card_header(
class = "text-center bg-white border-0 pt-4",
tags$img(src = "https://cdn-icons-png.flaticon.com/512/2098/2098402.png",
height = "60px", class = "mb-3"),
h2("Ticket System", class = "card-title")
),
# Tabs for Login and Registration
navset_pill(
id = "auth_tabs",
# Login Tab
nav_panel(
title = "Login",
value = "login",
div(class = "p-4",
div(class = "mb-3",
tags$label("Username", class = "form-label fw-semibold"),
textInput("username", NULL, placeholder = "Enter username",
width = "100%", class = "auth-input")
),
div(class = "mb-3",
tags$label("Password", class = "form-label fw-semibold"),
passwordInput("password", NULL, placeholder = "Enter password",
width = "100%", class = "auth-input")
),
div(class = "mb-3 d-flex justify-content-between align-items-center",
checkboxInput("remember", "Remember me"),
tags$a(href = "#", "Forgot password?", class = "text-primary text-decoration-none")
),
actionButton("login", "Sign In", width = "100%",
class = "btn-primary auth-btn py-2 mt-2")
)
),
# Registration Tab
nav_panel(
title = "Create Account",
value = "register",
div(class = "p-4",
div(class = "mb-3",
tags$label("Username", class = "form-label fw-semibold"),
textInput("new_username", NULL, placeholder = "Choose a username",
width = "100%", class = "auth-input")
),
div(class = "mb-3",
tags$label("Email", class = "form-label fw-semibold"),
textInput("new_email", NULL, placeholder = "Enter your email",
width = "100%", class = "auth-input")
),
div(class = "mb-3",
tags$label("Password", class = "form-label fw-semibold"),
passwordInput("new_password", NULL, placeholder = "Choose a password",
width = "100%", class = "auth-input")
),
div(class = "mb-3",
tags$label("Confirm Password", class = "form-label fw-semibold"),
passwordInput("confirm_password", NULL, placeholder = "Confirm password",
width = "100%", class = "auth-input")
),
# Registration error/success messages
hidden(
div(id = "register_error", class = "alert alert-danger", role = "alert")
),
hidden(
div(id = "register_success", class = "alert alert-success", role = "alert",
"Account created successfully! You can now log in.")
),
actionButton("create_account", "Create Account", width = "100%",
class = "btn-success auth-btn py-2 mt-2")
)
)
),
card_footer(
class = "text-center text-muted bg-white border-0 pb-4",
"© 2023 Shwari Health. All rights reserved."
)
)
)
),
# Main app content (hidden initially)
hidden(
div(id = "main_app",
# Main app content will go here
textOutput("welcome_message")
)
)
)
runApp()
runApp()
ymd(sys.Date())+month(5)
Sys.Date()
ymd(Sys.Date())+month(5)
ymd(Sys.Date())+10
ymd(Sys.Date())+day(60)
ymd(Sys.Date())+180
runApp()
runApp()
runApp()
validate_email("aureolngako@gmail.com")
validate_email("aureolngako@gmail.com")$valid
if (validate_email("aureolngako@gmail.com")$valid) {
OK
}
if (validate_email("aureolngako@gmail.com")$valid) {
"OK"
}
runApp()
runApp()
users
runApp()
loadPasswords <- function() {
read_sheet("1jtkLqJYiw854yOmj6kONkonSqolfSjl2fS0wdzJmjUU",sheet = "users_passwords")
}
loadPasswords
loadPasswords()
editPasswords <- function(data,sheet,range){
data <- data %>% as.list() %>% data.frame()
# Modify a specific row
range_write(
ss = "1jtkLqJYiw854yOmj6kONkonSqolfSjl2fS0wdzJmjUU",
sheet = "users_passwords",
data = data
)
}
editPasswords(users)
runApp()
ymd(Sys.Date())+160
class(ymd(Sys.Date())+160)
ymd(ymd(Sys.Date())+160)
class(ymd(ymd(Sys.Date())+160))
runApp()
loadPasswords() %>%
mutate(valid_till =  ymd(valid_till))
runApp()
runApp()
runApp()
runApp()
input$modal_new_username
?passwordInput
runApp()
runApp()
runApp()
runApp()
runApp()
?nav_panel()
runApp()
shiny::runApp()
runApp()
runApp()
pacman::p_load(
shiny,
shinyjs,
htmltools,
shinyalert,
lubridate,
DT,
googlesheets4,
mailR,
bslib,
dplyr,
waiter,
lubridate,
sodium,
here,
rio,
shinycustomloader
)
hf_data <- here("data","fosa.xlsx") %>%
import()
hf_data
hf_data %>%
filter(`Health facility` ==  "East")
hf_data %>%
filter(`Health facility` == "East")
hf_data %>%
filter(Region == "East")
hf_data %>%
filter(Region == "East") %>% pull(`Health facility`)
hf_data %>%
filter(Region == "East") %>% pull(`Health facility`) %>% unique()
runApp()
runApp()
runApp()
unique(hf_data$Region)
runApp()
runApp()
shiny::runApp()
